=== tests/cases/compiler/sourceMapValidationDestructuringVariableStatementNestedObjectBindingPattern.ts ===
declare var console: {
>console : { log(msg: string): void; }

    log(msg: string): void;
>log : (msg: string) => void
>msg : string
}
interface Robot {
>Robot : Robot

    name: string;
>name : string

    skills: {
>skills : { primary: string; secondary: string; }

        primary: string;
>primary : string

        secondary: string;
>secondary : string

    };
}
var robotA: Robot = { name: "mower", skills: { primary: "mowing", secondary: "none" } };
>robotA : Robot
>Robot : Robot
>{ name: "mower", skills: { primary: "mowing", secondary: "none" } } : { name: "mower"; skills: { primary: "mowing"; secondary: "none"; }; }
>name : "mower"
>"mower" : "mower"
>skills : { primary: "mowing"; secondary: "none"; }
>{ primary: "mowing", secondary: "none" } : { primary: "mowing"; secondary: "none"; }
>primary : "mowing"
>"mowing" : "mowing"
>secondary : "none"
>"none" : "none"

var robotB: Robot = { name: "trimmer", skills: { primary: "trimming", secondary: "edging" } };
>robotB : Robot
>Robot : Robot
>{ name: "trimmer", skills: { primary: "trimming", secondary: "edging" } } : { name: "trimmer"; skills: { primary: "trimming"; secondary: "edging"; }; }
>name : "trimmer"
>"trimmer" : "trimmer"
>skills : { primary: "trimming"; secondary: "edging"; }
>{ primary: "trimming", secondary: "edging" } : { primary: "trimming"; secondary: "edging"; }
>primary : "trimming"
>"trimming" : "trimming"
>secondary : "edging"
>"edging" : "edging"

var { skills: { primary: primaryA, secondary: secondaryA } } = robotA;
>skills : any
>primary : any
>primaryA : string
>secondary : any
>secondaryA : string
>robotA : Robot

var { name: nameB, skills: { primary: primaryB, secondary: secondaryB } } = robotB;
>name : any
>nameB : string
>skills : any
>primary : any
>primaryB : string
>secondary : any
>secondaryB : string
>robotB : Robot

var { name: nameC, skills: { primary: primaryB, secondary: secondaryB } } = { name: "Edger", skills: { primary: "edging", secondary: "branch trimming" } };
>name : any
>nameC : string
>skills : any
>primary : any
>primaryB : string
>secondary : any
>secondaryB : string
>{ name: "Edger", skills: { primary: "edging", secondary: "branch trimming" } } : { name: "Edger"; skills: { primary: "edging"; secondary: "branch trimming"; }; }
>name : "Edger"
>"Edger" : "Edger"
>skills : { primary: "edging"; secondary: "branch trimming"; }
>{ primary: "edging", secondary: "branch trimming" } : { primary: "edging"; secondary: "branch trimming"; }
>primary : "edging"
>"edging" : "edging"
>secondary : "branch trimming"
>"branch trimming" : "branch trimming"

if (nameB == nameB) {
>nameB == nameB : boolean
>nameB : string
>nameB : string

    console.log(nameC);
>console.log(nameC) : void
>console.log : (msg: string) => void
>console : { log(msg: string): void; }
>log : (msg: string) => void
>nameC : string
}
else {
    console.log(nameC);
>console.log(nameC) : void
>console.log : (msg: string) => void
>console : { log(msg: string): void; }
>log : (msg: string) => void
>nameC : string
}
