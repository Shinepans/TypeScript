=== tests/cases/conformance/types/stringLiteral/stringLiteralsReturnedFromFunction02.ts ===

function f1() {
>f1 : Symbol(f1, Decl(stringLiteralsReturnedFromFunction02.ts, 0, 0))

    return "A";
}

function f2(b1: boolean, b2: boolean) {
>f2 : Symbol(f2, Decl(stringLiteralsReturnedFromFunction02.ts, 3, 1))
>b1 : Symbol(b1, Decl(stringLiteralsReturnedFromFunction02.ts, 5, 12))
>b2 : Symbol(b2, Decl(stringLiteralsReturnedFromFunction02.ts, 5, 24))

    if (b1) {
>b1 : Symbol(b1, Decl(stringLiteralsReturnedFromFunction02.ts, 5, 12))

        return b2 ? "A" : "B";
>b2 : Symbol(b2, Decl(stringLiteralsReturnedFromFunction02.ts, 5, 24))
    }
    
    return b2 ? "B" : "A";
>b2 : Symbol(b2, Decl(stringLiteralsReturnedFromFunction02.ts, 5, 24))
}

function f3(b1: boolean, b2: boolean) {
>f3 : Symbol(f3, Decl(stringLiteralsReturnedFromFunction02.ts, 11, 1))
>b1 : Symbol(b1, Decl(stringLiteralsReturnedFromFunction02.ts, 13, 12))
>b2 : Symbol(b2, Decl(stringLiteralsReturnedFromFunction02.ts, 13, 24))

    if (b1) {
>b1 : Symbol(b1, Decl(stringLiteralsReturnedFromFunction02.ts, 13, 12))

        const result1 = b2 ? "A" : "B";
>result1 : Symbol(result1, Decl(stringLiteralsReturnedFromFunction02.ts, 15, 13))
>b2 : Symbol(b2, Decl(stringLiteralsReturnedFromFunction02.ts, 13, 24))

        return result1;
>result1 : Symbol(result1, Decl(stringLiteralsReturnedFromFunction02.ts, 15, 13))
    }
    
    const result2 = b2 ? "B" : "A";
>result2 : Symbol(result2, Decl(stringLiteralsReturnedFromFunction02.ts, 19, 9))
>b2 : Symbol(b2, Decl(stringLiteralsReturnedFromFunction02.ts, 13, 24))

    return result2;
>result2 : Symbol(result2, Decl(stringLiteralsReturnedFromFunction02.ts, 19, 9))
}

