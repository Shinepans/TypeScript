=== tests/cases/compiler/sourceMapValidationDestructuringVariableStatementDefaultValues.ts ===
interface Robot {
>Robot : Robot

    name: string;
>name : string

    skill: string;
>skill : string
}
declare var console: {
>console : { log(msg: string): void; }

    log(msg: string): void;
>log : (msg: string) => void
>msg : string
}
var hello = "hello";
>hello : string
>"hello" : "hello"

var robotA: Robot = { name: "mower", skill: "mowing" };
>robotA : Robot
>Robot : Robot
>{ name: "mower", skill: "mowing" } : { name: "mower"; skill: "mowing"; }
>name : "mower"
>"mower" : "mower"
>skill : "mowing"
>"mowing" : "mowing"

var robotB: Robot = { name: "trimmer", skill: "trimming" };
>robotB : Robot
>Robot : Robot
>{ name: "trimmer", skill: "trimming" } : { name: "trimmer"; skill: "trimming"; }
>name : "trimmer"
>"trimmer" : "trimmer"
>skill : "trimming"
>"trimming" : "trimming"

var { name: nameA = "<NoName>" } = robotA;
>name : any
>nameA : string
>"<NoName>" : "<NoName>"
>robotA : Robot

var { name: nameB = "<NoName>", skill: skillB = "<skillUnspecified>" } = robotB;
>name : any
>nameB : string
>"<NoName>" : "<NoName>"
>skill : any
>skillB : string
>"<skillUnspecified>" : "<skillUnspecified>"
>robotB : Robot

var { name: nameC = "<NoName>", skill: skillC = "<skillUnspecified>" } = { name: "Edger", skill: "cutting edges" };
>name : any
>nameC : string
>"<NoName>" : "<NoName>"
>skill : any
>skillC : string
>"<skillUnspecified>" : "<skillUnspecified>"
>{ name: "Edger", skill: "cutting edges" } : { name?: "Edger"; skill?: "cutting edges"; }
>name : "Edger"
>"Edger" : "Edger"
>skill : "cutting edges"
>"cutting edges" : "cutting edges"

if (nameA == nameB) {
>nameA == nameB : boolean
>nameA : string
>nameB : string

    console.log(skillB);
>console.log(skillB) : void
>console.log : (msg: string) => void
>console : { log(msg: string): void; }
>log : (msg: string) => void
>skillB : string
}
else {
    console.log(nameC);
>console.log(nameC) : void
>console.log : (msg: string) => void
>console : { log(msg: string): void; }
>log : (msg: string) => void
>nameC : string
}
